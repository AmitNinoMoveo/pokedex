{"version":3,"sources":["api/index.ts","utils/images/pokemon-logo-img.svg","components/HeaderComponent/utils/utils.ts","components/HeaderComponent/components/HeaderComponent.tsx","components/SearchComponent/state/action-types.ts","components/SearchComponent/state/SearchReducer.ts","features/AllPokemon/state/action-types.ts","features/AllPokemon/state/AllPokemonStateReducer.ts","features/SinglePokemon/state/action-types.ts","features/SinglePokemon/state/singlePokemonReducer.ts","state/reducers/reducers.ts","state/store.ts","components/SearchComponent/repository/repository.ts","components/SearchComponent/state/actions.ts","features/AllPokemon/utils/utils.ts","features/AllPokemon/repository/repository.ts","features/AllPokemon/state/actions.ts","components/ButtonComponent/components/Button.tsx","components/SearchComponent/components/SearchComponent.tsx","utils/utils.ts","features/AllPokemon/components/PokemonItem.tsx","features/SinglePokemon/repository/repository.ts","features/AllPokemon/components/Pages.tsx","utils/images/pikatchu-animation.gif","components/LoadingComponent/components/Loading.tsx","features/AllPokemon/components/PokemonList.tsx","features/SinglePokemon/state/actions.ts","features/SinglePokemon/components/SinglePokemon.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["apiUrl","onClickRedirectHome","window","location","replace","HeaderComponent","className","onClick","src","PokemonLogo","alt","url","a","axios","get","Development","SearchActionTypeNames","api","ActionTypeNames","searchReducer","state","action","type","SEARCH_SETSTATE","newState","SEARCH_RESET","SinglePokemonActionTypeNames","initialState","pokemonList","pageNumber","allPokemonReducer","ALLPOKEMON_SET_POKEMON","pokemon","ALLPOKEMON_RESET_STATE","ALLPOKEMON_SET_PAGENUMBER","ALLPOKEMON_PAGENUMBER_INC","ALLPOKEMON_PAGENUMBER_DEC","id","name","description","imageUrl","types","stats","value","singlePokemonReducer","SINGLEPOKEMON_SETSTATE","SINGLEPOKEMON_RESETINIT","appReducers","combineReducers","allPokemonState","singlePokemonState","searchState","store","createStore","applyMiddleware","thunk","fetchPokemonBySearch","query","getState","data","charAt","toUpperCase","substring","pokemonItem","console","log","searchReset","generatePokemonFetchUrl","outputUrl","fetchPokemonOffset","baseUrl","getPokemonsListRepo","pokemonsList","results","map","split","allPokemonFetchListAction","dispatch","ButtonComponent","props","extraStyleClassNames","func","txt","icon","SearchComponent","useDispatch","searchInputValue","useSelector","onChange","e","str","target","Button","length","generatePokemonIdString","numOfZerosToAdd","Math","abs","toString","repeat","toTitleCaseSingle","toLowerCase","getPokemonTypeColor","pokemonTypeColor","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","PokemonItemComponent","history","useHistory","push","getPokemonRepo","pokemonId","response1","statsTypesResponse","response2","flavorTextResponse","rawStat","stat","includes","base_stat","rawType","flavor_text_entries","flavor_text","sprites","front_default","PagesComponent","LoadingComponent","PikatchuAnimation","AllPokemonComponent","useEffect","PokemonList","SinglePokemonComponent","useParams","style","backgroundImage","i","backgroundColor","App","path","SinglePokemon","from","to","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.912842b6.chunk.js","sourcesContent":["import axios from \"axios\";\n\nenum apiUrl {\n    Development = 'https://pokeapi.co/api/v2/',\n}\n\nasync function apiGet(url: string):Promise<any>{\n    return await axios.get(apiUrl.Development+url);\n};\n\nconst api = {\n    get: apiGet,\n};\n\nexport default api;","export default __webpack_public_path__ + \"static/media/pokemon-logo-img.7638f410.svg\";","export const onClickRedirectHome = ()=>{\n    window.location.replace('/all');\n};","import React from 'react'\nimport '../../../styles/app/Header.css';\nimport PokemonLogo from '../../../utils/images/pokemon-logo-img.svg';\nimport { onClickRedirectHome } from '../utils/utils';\n\nconst HeaderComponent = () => {\n\n    return (\n        <div className=\"container-app-header\" onClick={onClickRedirectHome}>\n            <img src={PokemonLogo} alt=\"pokemon-logo-img\" />\n        </div>\n    )\n}\n\nexport default HeaderComponent;\n","export enum SearchActionTypeNames {\n  SEARCH_SETSTATE = \"SEARCH_SETSTATE\",\n  SEARCH_RESET = \"SEARCH_RESET\",\n}\n\ntype SearchSetState = {\n  type: SearchActionTypeNames.SEARCH_SETSTATE;\n  newState: string;\n};\n\ntype SearchReset = {\n  type: SearchActionTypeNames.SEARCH_RESET;\n}\n\nexport type SearchActionType =\n  | SearchSetState\n  | SearchReset","import { SearchActionType, SearchActionTypeNames } from \"./action-types\";\n\nconst initialState = \"\";\n\nconst searchReducer = (state = initialState, action: SearchActionType) => {\n  switch (action.type) {\n    case SearchActionTypeNames.SEARCH_SETSTATE:\n      return action.newState;\n    case SearchActionTypeNames.SEARCH_RESET:\n      return '';\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;","import { PokemonItemInterface } from \"../utils/AllPokemonFeatureInterfaces\";\n\nexport enum ActionTypeNames {\n  ALLPOKEMON_SET_POKEMON = \"ALLPOKEMON_SET_POKEMON\",\n  ALLPOKEMON_RESET_STATE = \"ALLPOKEMON_RESET_STATE\",\n  ALLPOKEMON_SET_PAGENUMBER = \"ALLPOKEMON_SET_PAGENUMBER\",\n  ALLPOKEMON_PAGENUMBER_INC = \"ALLPOKEMON_PAGENUMBER_INC\",\n  ALLPOKEMON_PAGENUMBER_DEC = \"ALLPOKEMON_PAGENUMBER_DEC\",\n}\n\nexport type AllPokemonSetPokemon = {\n  type: ActionTypeNames.ALLPOKEMON_SET_POKEMON;\n  pokemon: PokemonItemInterface[];\n};\n\nexport type AllPokemonResetState = {\n  type: ActionTypeNames.ALLPOKEMON_RESET_STATE;\n}\n\nexport type AllPokemonSetPageNumber = {\n  type: ActionTypeNames.ALLPOKEMON_SET_PAGENUMBER;\n  pageNumber: number;\n};\n\nexport type AllPokemonPageNumberInc = {\n  type: ActionTypeNames.ALLPOKEMON_PAGENUMBER_INC;\n};\nexport type AllPokemonPageNumberDec = {\n  type: ActionTypeNames.ALLPOKEMON_PAGENUMBER_DEC;\n};\n\nexport type AllPokemonActionTypes =\n  | AllPokemonSetPokemon\n  | AllPokemonResetState\n  | AllPokemonSetPageNumber\n  | AllPokemonPageNumberInc\n  | AllPokemonPageNumberDec;\n// Visual End Of AllPokemonActionTypes Line!!\n","import { PokemonItemInterface } from \"../utils/AllPokemonFeatureInterfaces\";\nimport { ActionTypeNames, AllPokemonActionTypes } from \"./action-types\";\n\nexport type allPokemonReducerType = {\n    pokemonList: PokemonItemInterface[];\n    pageNumber: number;\n  }\n\nconst initialState: allPokemonReducerType = {\n  pokemonList: [],\n  pageNumber: 0,\n};\n\nconst allPokemonReducer = (\n  state = initialState,\n  action: AllPokemonActionTypes\n): allPokemonReducerType => {\n  switch (action.type) {\n    case ActionTypeNames.ALLPOKEMON_SET_POKEMON:\n        return {\n        ...state,\n        pokemonList: action.pokemon,\n      };\n    case ActionTypeNames.ALLPOKEMON_RESET_STATE:\n      return {\n        ...state,\n        pokemonList: {...initialState.pokemonList}\n      }\n    case ActionTypeNames.ALLPOKEMON_SET_PAGENUMBER:\n        return {\n            ...state,\n            pageNumber: action.pageNumber\n        };\n    case ActionTypeNames.ALLPOKEMON_PAGENUMBER_INC:\n      if (state.pageNumber === 20) {\n        return state;\n      } else {\n        return {\n            ...state, \n            pageNumber: state.pageNumber + 1\n        };\n      };\n    case ActionTypeNames.ALLPOKEMON_PAGENUMBER_DEC:\n      if (state.pageNumber === 0) {\n        return state;\n      } else {\n        return{\n            ...state,\n            pageNumber: state.pageNumber - 1\n        };\n      };\n    default:\n      return state;\n  }\n};\n\nexport default allPokemonReducer;\n","import { singlePokemon } from \"../utils/interfaces\"\n\nexport enum SinglePokemonActionTypeNames {\n    SINGLEPOKEMON_SETSTATE = 'SINGLEPOKEMON_SETSTATE',\n    SINGLEPOKEMON_RESETINIT = 'SINGLEPOKEMON_RESETINIT',\n};\n\ntype SinglePokemonSetState = {\n    type: SinglePokemonActionTypeNames.SINGLEPOKEMON_SETSTATE;\n    pokemon: singlePokemon\n};\n\ntype SinglePokemonResetState = {\n    type: SinglePokemonActionTypeNames.SINGLEPOKEMON_RESETINIT\n}\n\nexport type SinglePokemonActionTypes = \n    | SinglePokemonSetState\n    | SinglePokemonResetState;\n\n","import { singlePokemon } from \"../utils/interfaces\"\nimport { SinglePokemonActionTypeNames, SinglePokemonActionTypes } from \"./action-types\"\n\nconst initialState: singlePokemon = {\n    id: 0,\n    name: '',\n    description: '',\n    imageUrl: '',\n    types: [''],\n    stats: [{name: '', value: 0}],\n}\n\nconst singlePokemonReducer = (state = initialState, action: SinglePokemonActionTypes) => {\n    switch(action.type){\n        case (SinglePokemonActionTypeNames.SINGLEPOKEMON_SETSTATE):\n            return {...action.pokemon}\n        case (SinglePokemonActionTypeNames.SINGLEPOKEMON_RESETINIT):\n            return {...initialState}\n        default:\n            return state\n    };\n};\n\nexport default singlePokemonReducer;","import { combineReducers } from \"@reduxjs/toolkit\";\nimport searchReducer from \"../../components/SearchComponent/state/SearchReducer\";\nimport allPokemonReducer from '../../features/AllPokemon/state/AllPokemonStateReducer'\nimport singlePokemonReducer from '../../features/SinglePokemon/state/singlePokemonReducer';\n\n\nconst appReducers = combineReducers({\n    allPokemonState: allPokemonReducer,\n    singlePokemonState: singlePokemonReducer,\n    searchState: searchReducer\n});\n\nexport default appReducers;","import { ThunkAction, Action, createStore, applyMiddleware } from '@reduxjs/toolkit';\nimport thunk from \"redux-thunk\";\nimport appReducers from './reducers/reducers';\n\nexport const store = createStore(\n  appReducers,\n  {},\n  applyMiddleware(thunk)\n);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState =  ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import api from \"../../../api\";\nimport { PokemonItemInterface } from \"../../../features/AllPokemon/utils/AllPokemonFeatureInterfaces\";\nimport { store } from \"../../../state/store\";\n\ninterface rawResponse {\n  data: {\n    name: string,\n    id: number,\n  }\n}\n\nexport const fetchPokemonBySearch = async (): Promise<\n  PokemonItemInterface[]\n> => {\n  try {\n    const query = store.getState().searchState;\n    const { data } : rawResponse = await api.get(\"pokemon/\" + query);\n    const name = data.name.charAt(0).toUpperCase() + data.name.substring(1);\n    const id = data.id;\n    const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n    const pokemonItem = [{ id, name, imageUrl }] as PokemonItemInterface[];\n    return pokemonItem;\n  } catch (error) {\n    console.log(error);\n    return [];\n  };\n};\n","import { SearchActionType, SearchActionTypeNames } from \"./action-types\";\n\nexport const searchSetOnChangeAction = (str: string): SearchActionType => {\n  return {\n    type: SearchActionTypeNames.SEARCH_SETSTATE,\n    newState: str,\n  };\n};\nexport const searchReset = (): SearchActionType => {\n  return {\n    type: SearchActionTypeNames.SEARCH_RESET\n  };\n};","import { store } from \"../../../state/store\";\n\n\nexport function generatePokemonFetchUrl(): string {\n  const pageNumber = store.getState().allPokemonState.pageNumber;\n\n  const baseUrl = \"pokemon?\";\n  const fetchPokemonAmountLimit = 20;\n\n  let outputUrl: string;\n  let fetchPokemonOffset: number;\n\n  if (pageNumber <= 0) {\n    outputUrl = `${baseUrl}limit=${fetchPokemonAmountLimit}`;\n  } else {\n    fetchPokemonOffset = pageNumber * fetchPokemonAmountLimit;\n    outputUrl = `${baseUrl}offset=${fetchPokemonOffset}&limit=${fetchPokemonAmountLimit}`;\n  }\n\n  return outputUrl;\n};\n","import api from \"../../../api\";\nimport { PokemonItemInterface } from \"../utils/AllPokemonFeatureInterfaces\";\nimport { generatePokemonFetchUrl } from \"../utils/utils\";\n\nexport async function getPokemonsListRepo() {\n  const { data } = await api.get(generatePokemonFetchUrl());\n  const pokemonsList = data.results.map(\n    (pokemon: { name: string; url: string }) => {\n      let name = pokemon.name;\n      let url = pokemon.url;\n      let id = +url.split(\"pokemon/\")[1].split(\"/\")[0];\n      let imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n      name = name.charAt(0).toUpperCase() + name.substring(1);\n      return { id, name, imageUrl } as PokemonItemInterface;\n    }\n  );\n  return pokemonsList;\n};\n","import { fetchPokemonBySearch } from \"../../../components/SearchComponent/repository/repository\";\nimport { searchReset } from \"../../../components/SearchComponent/state/actions\";\nimport { AppThunk } from \"../../../state/store\";\nimport { getPokemonsListRepo } from \"../repository/repository\";\nimport { ActionTypeNames, AllPokemonActionTypes } from \"./action-types\";\n\nexport const allPokemonResetStateAction = (): AllPokemonActionTypes => {\n    return {\n        type: ActionTypeNames.ALLPOKEMON_RESET_STATE\n    }\n}\n\nexport const allPokemonFetchListAction= (): AppThunk => async (dispatch) => {\n    dispatch({\n        type: ActionTypeNames.ALLPOKEMON_RESET_STATE\n    })\n    const data = await getPokemonsListRepo();\n    dispatch({\n        type: ActionTypeNames.ALLPOKEMON_SET_POKEMON,\n        pokemon: [...data]\n    });\n};\n\nexport const allPokemonSearchAction = (): AppThunk => async (dispatch) => {\n    dispatch({\n        type: ActionTypeNames.ALLPOKEMON_RESET_STATE\n    })\n    const data = await fetchPokemonBySearch();\n    if (!data.length) {\n        dispatch(allPokemonFetchListAction());\n        dispatch(searchReset());\n        return\n    }\n    dispatch({\n        type: ActionTypeNames.ALLPOKEMON_SET_POKEMON,\n        pokemon: [...data]\n    });\n    dispatch(searchReset());\n};\n\nexport const allPokemonPageInc = (): AppThunk => async (dispatch) =>  {\n    dispatch({\n        type: ActionTypeNames.ALLPOKEMON_PAGENUMBER_INC\n    });\n    dispatch(allPokemonFetchListAction());\n};\nexport const allPokemonPageDec = (): AppThunk => async (dispatch) =>  {\n    dispatch({\n        type: ActionTypeNames.ALLPOKEMON_PAGENUMBER_DEC\n    });\n    dispatch(allPokemonFetchListAction());\n};","import React from \"react\";\nimport \"../style/button.css\";\n\ntype Props = {\n  func: () => void;\n  txt?: string;\n  icon?: any;\n  extraStyleClassNames?: string;\n};\n\nconst ButtonComponent = (props: Props) => {\n  return (\n    <button\n      className={`app-button ${\n        props.extraStyleClassNames ? props.extraStyleClassNames : \"\"\n      }`}\n      onClick={() => props.func()}\n    >\n      {props.txt ? props.txt : props.icon}\n    </button>\n  );\n};\n\nexport default ButtonComponent;\n","import React from 'react'\nimport '../style/search.css';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { allPokemonSearchAction } from '../../../features/AllPokemon/state/actions'\nimport ButtonComponent from '../../ButtonComponent/components/Button'\nimport { searchSetOnChangeAction } from '../state/actions'\nimport { RootState } from '../../../state/store';\n\nconst SearchComponent = () => {\n\n    const dispatch = useDispatch();\n    const searchInputValue = useSelector((state: RootState)=>state.searchState);\n\n    return (\n        <div className=\"search-container\">\n            <input type=\"text\" value={searchInputValue} onChange={(e)=>dispatch(searchSetOnChangeAction(e.target.value))} />\n            <ButtonComponent func={()=>{dispatch(allPokemonSearchAction())}} txt={'Search'} />\n        </div>\n    )\n}\n\nexport default SearchComponent\n","export const generatePokemonIdString = (id: number): string => {\n  const numOfZerosToAdd: number = 3 - Math.abs(id).toString().length;\n  if (numOfZerosToAdd <= 0) {\n    return `#${id}`;\n  }\n  return \"#\" + \"0\".repeat(numOfZerosToAdd) + id;\n};\n\nexport const toTitleCaseSingle = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();\n};\nexport const toTitleCase = (str: string): string => {\n  return str.replace( /\\w\\S*/g , (txt:string)=>toTitleCaseSingle(txt));\n};\n\nexport const getPokemonTypeColor = (type: string) => {\n  const pokemonTypeColor = {\n    normal: \"#A8A77A\",\n    fire: \"#EE8130\",\n    water: \"#6390F0\",\n    electric: \"#F7D02C\",\n    grass: \"#7AC74C\",\n    ice: \"#96D9D6\",\n    fighting: \"#C22E28\",\n    poison: \"#A33EA1\",\n    ground: \"#E2BF65\",\n    flying: \"#A98FF3\",\n    psychic: \"#F95587\",\n    bug: \"#A6B91A\",\n    rock: \"#B6A136\",\n    ghost: \"#735797\",\n    dragon: \"#6F35FC\",\n    dark: \"#705746\",\n    steel: \"#B7B7CE\",\n    fairy: \"#D685AD\",\n  };\n  if (type in pokemonTypeColor) {\n    // @ts-ignore\n    return pokemonTypeColor[type];\n  }\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { generatePokemonIdString } from '../../../utils/utils';\nimport '../styles/PokemonItem.css';\nimport { PokemonItemInterface } from '../utils/AllPokemonFeatureInterfaces';\n\ntype Props = {\n    pokemon: PokemonItemInterface\n}\n\nconst PokemonItemComponent: React.FC<Props> = ({pokemon}: Props) => {\n\n    const { id, name, imageUrl } = pokemon;\n\n    const history = useHistory();\n    const onPokemonClick = () => {\n        history.push('/pokemon/'+pokemon.id);\n    };\n\n    return (\n        <div className=\"container-pokemon-item\" id=\"hoverable-container\" onClick={onPokemonClick }>\n            <p id=\"id\" >{generatePokemonIdString(id)}</p>\n            <img id=\"pokemon\" src={imageUrl} alt={`${name}`} />\n            <p id=\"name\" >{name}</p>\n        </div>\n    )\n}\n\nexport default PokemonItemComponent;","import api from \"../../../api\";\nimport { singlePokemon, singleStat } from \"../utils/interfaces\";\n\ntype rawStat = {\n  base_stat: number;\n  stat: {\n    name: string;\n  };\n};\ntype rawType = {\n  type: {\n    name: string;\n  };\n};\ntype rawStatsTypesResponse = {\n  name: string;\n  sprites: {\n    front_default: string;\n  };\n  stats: rawStat[];\n  types: rawType[];\n};\ntype rawFlavorTextResponse = {\n  flavor_text_entries: { flavor_text: string }[];\n};\n\nexport const getPokemonRepo = async (\n  pokemonId: number\n): Promise<singlePokemon> => {\n  const response1 = await api.get(\"pokemon/\" + pokemonId);\n  const statsTypesResponse: rawStatsTypesResponse = response1.data;\n  const response2 = await api.get(\"pokemon-species/\" + pokemonId);\n  const flavorTextResponse: rawFlavorTextResponse = response2.data;\n  const stats: singleStat[] = statsTypesResponse.stats.map(\n    (rawStat: rawStat) => {\n      let name = rawStat.stat.name;\n      if (name.includes('-')) {\n        name = name.replace('-', ' ') ;\n      }\n      const stat: singleStat = {\n        name,\n        value: +rawStat.base_stat,\n      };\n      return stat;\n    }\n  );\n  const types: string[] = statsTypesResponse.types.map((rawType: rawType) => {\n    const type = rawType.type.name;\n    return type;\n  });\n  const pokemon: singlePokemon = {\n    id: pokemonId,\n    name: statsTypesResponse.name,\n    description: flavorTextResponse.flavor_text_entries[0].flavor_text,\n    imageUrl: statsTypesResponse.sprites.front_default,\n    types,\n    stats,\n  };\n  return pokemon;\n};\n","import React from \"react\";\nimport '../styles/Pages.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ButtonComponent from \"../../../components/ButtonComponent/components/Button\";\nimport { allPokemonPageDec, allPokemonPageInc } from \"../state/actions\";\nimport { RootState } from \"../../../state/store\";\n\nconst PagesComponent = () => {\n  const dispatch = useDispatch();\n  const pageNumber = useSelector((state: RootState)=>state.allPokemonState.pageNumber);\n\n  return (\n    <div className=\"pages-container\">\n      <ButtonComponent\n        key={\"dec\"}\n        func={() => {\n          dispatch(allPokemonPageDec());\n        }}\n        txt={\"<\"}\n        />\n        <p id=\"page-indicator\">{pageNumber+1}</p>\n      <ButtonComponent\n        key={\"inc\"}\n        func={() => {\n          dispatch(allPokemonPageInc());\n        }}\n        txt={\">\"}\n      />\n    </div>\n  );\n};\n\nexport default PagesComponent;\n","export default __webpack_public_path__ + \"static/media/pikatchu-animation.ee1b7ad2.gif\";","import React from 'react';\nimport '../styles/Loading.css';\nimport PikatchuAnimation from '../../../utils/images/pikatchu-animation.gif';\n\nconst LoadingComponent = () => {\n    return (\n        <div className='loading-container'>\n            <img src={PikatchuAnimation} alt=\"pokemon-loading\" />\n        </div>\n    );\n};\n\nexport default LoadingComponent\n","import React, { useEffect } from \"react\";\nimport '../styles/PokemonList.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../../state/store\";\nimport { allPokemonFetchListAction } from \"../state/actions\";\nimport { PokemonItemInterface } from \"../utils/AllPokemonFeatureInterfaces\";\nimport PokemonItemComponent from \"./PokemonItem\";\nimport { SinglePokemonResetState } from \"../../SinglePokemon/state/actions\";\nimport PagesComponent from \"./Pages\";\nimport LoadingComponent from \"../../../components/LoadingComponent/components/Loading\";\n\nconst AllPokemonComponent = () => {\n  const pokemonList = useSelector(\n    (state: RootState) => state.allPokemonState.pokemonList\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(pokemonList && !pokemonList.length){\n      dispatch(allPokemonFetchListAction());\n    };\n    dispatch(SinglePokemonResetState());\n    // eslint-disable-next-line\n  }, []);\n\n  const PokemonList = () => (\n    <div className=\"pokemon-list-container\">\n      {pokemonList.length ? (\n        pokemonList.map((pokemon: PokemonItemInterface) => {\n          return <PokemonItemComponent key={pokemon.id} pokemon={pokemon} />;\n        })\n      ) : (\n        <LoadingComponent />\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"allpokemon-container\" >\n      <PagesComponent />\n      <PokemonList />\n    </div>\n  );\n};\n\nexport default AllPokemonComponent;\n","import { AppThunk } from \"../../../state/store\";\nimport { getPokemonRepo } from \"../repository/repository\";\nimport { SinglePokemonActionTypeNames, SinglePokemonActionTypes } from \"./action-types\";\n\nexport const SinglePokemonFetchAction = (pokemonId: number): AppThunk => async (dispatch) => {\n    const data = await getPokemonRepo(pokemonId);\n    dispatch({\n        type: SinglePokemonActionTypeNames.SINGLEPOKEMON_SETSTATE,\n        pokemon: {...data}\n    });\n};\n\nexport const SinglePokemonResetState = (): SinglePokemonActionTypes => {\n    return {\n        type: SinglePokemonActionTypeNames.SINGLEPOKEMON_RESETINIT\n    };\n};","import React, { useEffect } from \"react\";\nimport \"../styles/singlePokemon.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { RootState } from \"../../../state/store\";\nimport {\n  generatePokemonIdString,\n  getPokemonTypeColor,\n  toTitleCase,\n  toTitleCaseSingle,\n} from \"../../../utils/utils\";\nimport { SinglePokemonFetchAction } from \"../state/actions\";\nimport LoadingComponent from \"../../../components/LoadingComponent/components/Loading\";\n\ntype Params = {\n  id: string;\n};\n\nconst SinglePokemonComponent = () => {\n  const { id } = useParams<Params>();\n  const dispatch = useDispatch();\n  const pokemon = useSelector((state: RootState) => state.singlePokemonState);\n\n  useEffect(() => {\n    dispatch(SinglePokemonFetchAction(+id));\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      {pokemon && pokemon.id ? (\n        <div className=\"single-pokemon-container\">\n          <p id=\"id\">{generatePokemonIdString(pokemon.id)}</p>\n          <div className=\"image-title-container\">\n            <div\n              className=\"pokemon-image\"\n              style={{ backgroundImage: `url(${pokemon.imageUrl})` }}\n            />\n            <p className=\"title\">{toTitleCaseSingle(pokemon.name)}</p>\n            <div className=\"pokemon-types-container\">\n              {pokemon.types.map((type: string, i) => (\n                <p\n                  key={i}\n                  className=\"pokemon-type\"\n                  style={{ backgroundColor: `${getPokemonTypeColor(type)}` }}\n                >\n                  {toTitleCaseSingle(type)}\n                </p>\n              ))}\n            </div>\n          </div>\n          <div className=\"divider\" />\n          <div className=\"description-stats-container\">\n            <p className=\"title\">Description</p>\n            <p className=\"description\">{pokemon.description}</p>\n            <p className=\"title\">Stats</p>\n            <div className=\"stats-container\">\n              {pokemon.stats.map((stat, i) => (\n                <p key={i}>{`${toTitleCase(stat.name)}: ${stat.value}`}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <LoadingComponent />\n      )}\n    </>\n  );\n};\n\nexport default SinglePokemonComponent;\n","import React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport \"./styles/app/App.css\";\nimport HeaderComponent from \"./components/HeaderComponent/components/HeaderComponent\";\nimport SearchComponent from \"./components/SearchComponent/components/SearchComponent\";\nimport AllPokemonComponent from \"./features/AllPokemon/components/PokemonList\";\nimport SinglePokemonComponent from \"./features/SinglePokemon/components/SinglePokemon\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderComponent />\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/pokemon/:id\">\n            <SinglePokemonComponent />\n          </Route>\n          <Route path=\"/all\">\n            <SearchComponent />\n            <AllPokemonComponent />\n          </Route>\n          <Route>\n            <Redirect from=\"/*\" to=\"/all\" />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global/index.css';\nimport App from './App';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}